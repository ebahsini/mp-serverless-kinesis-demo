service: demo-consumer

# many configuration values are not required for testing
# but these are preserved to facilitate creating a new
# consumer service (with useful configs) -- check
# values against relevant deployed services

custom:
  local:
    accountId: 185354281374
    cacheNodeType: cache.t2.micro
    emailAlert: mpalerts.test@mobileposse.com
    emailSource: mpalerts.test@mobileposse.com
    redisHost: localhost
    redisPort: 6379
    region: us-east-2
    runtime: nodejs4.3
    securityGroupRedis: sg-8a67b4f6
    stage: local
    stream: arn:aws:kinesis:us-east-1:185354281374:stream/epx-kinesis-cache-stream-local
    subnet: subnet-79460c0f
  test:
    accountId: 185354281374
    cacheNodeType: cache.t2.micro
    emailAlert: mpalerts.test@mobileposse.com
    emailSource: mpalerts.test@mobileposse.com
    redisHost: demo-consumer-test.z6hach.0001.use1.cache.amazonaws.com
    redisPort: 6379
    region: us-east-1
    runtime: nodejs4.3
    securityGroupRedis: sg-8a67b4f6
    stage: test
    stream: arn:aws:kinesis:us-east-1:185354281374:stream/epx-kinesis-cache-stream-test
    subnet: subnet-79460c0f

provider:
  name: aws
  runtime: ${self:custom.${opt:stage}.runtime}
  region: ${self:custom.${opt:stage}.region}
  stage: ${self:custom.${opt:stage}.stage}
  environment:
    EMAIL_ALERT: ${self:custom.${opt:stage}.emailAlert}
    EMAIL_SOURCE: ${self:custom.${opt:stage}.emailSource}
    REDIS_HOST: ${self:custom.${opt:stage}.redisHost}
    REDIS_PORT: ${self:custom.${opt:stage}.redisPort}
    REGION: ${self:custom.${opt:stage}.region}
    STAGE: ${self:custom.${opt:stage}.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:AttachNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
        - ec2:ModifyNetworkInterfaceAttribute
        - ec2:ResetNetworkInterfaceAttribute
        - autoscaling:CompleteLifecycleAction
      Resource: "*"
    - Effect: Allow
      Action:
        - kinesis:*
      Resource: ${self:custom.${opt:stage}.stream}

# items under stream must be indented four spaces
# or "EventSourceMapping" will not be created (as
# arn is a property of stream, not a peer)
functions:
  publish:
    name: ${self:service}-${self:provider.stage}
    handler: publish.publishStream
    description: ${self:service} - publish device stream
    events:
      - schedule: rate(1 minute)
  consume:
    handler: consume.consumeStream
    name: ${self:service}-${self:provider.stage}
    description: ${self:service} - consume device stream
    memorySize: 1024
    timeout: 300
    vpc:
      securityGroupIds:
        - ${self:custom.${opt:stage}.securityGroupRedis}
      subnetIds:
        - ${self:custom.${opt:stage}.subnet}
    events:
      - stream:
          arn: ${self:custom.${opt:stage}.stream}
          batchSize: 2
          startingPosition: TRIM_HORIZON
  configure:
    handler: configure.configureKeywords
    name: ${self:service}-${self:provider.stage}
    description: ${self:service} - configure keywords
    vpc:
      securityGroupIds:
        - ${self:custom.${opt:stage}.securityGroupRedis}
      subnetIds:
        - ${self:custom.${opt:stage}.subnet}
