service: epx-kinesis-consumer

# many configuration values are not required for testing
# but these are preserved to facilitate creating a new
# consumer service (with useful configs) -- check
# values against relevant deployed services

custom:
  local:
    accountId: 185354281374
    redisHost: localhost
    redisPort: 6379
    region: us-east-2
    runtime: nodejs4.3
    securityGroupRedis: sg-8a67b4f6
    stage: local
    stream: arn:aws:kinesis:us-east-1:185354281374:stream/epx-kinesis-cache-stream-local
    subnet: subnet-79460c0f
  test:
    accountId: 185354281374
 #   redisHost: epx-safebrowse-test.wu7qqr.0001.use1.cache.amazonaws.com
 #   redisPort: 6379
    region: us-east-1
    runtime: nodejs4.3
 #   securityGroupRedis: sg-8a67b4f6
    stage: test
    stream: arn:aws:kinesis:us-east-1:185354281374:stream/epx-kinesis-cache-stream-test
    subnet: subnet-79460c0f
    cacheNodeType: cache.t2.micro

provider:
  name: aws
  runtime: ${self:custom.${opt:stage}.runtime}
  region: ${self:custom.${opt:stage}.region}
  stage: ${self:custom.${opt:stage}.stage}
  environment:
 #   REDIS_HOST: ${self:custom.${opt:stage}.redisHost}
 #   REDIS_PORT: ${self:custom.${opt:stage}.redisPort}
    REGION: ${self:custom.${opt:stage}.region}
    STAGE: ${self:custom.${opt:stage}.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: arn:aws:logs:us-east-2:${self:custom.${self:provider.stage}.accountId}:log-group:/aws/lambda/*:*:*
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:AttachNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
        - ec2:ModifyNetworkInterfaceAttribute
        - ec2:ResetNetworkInterfaceAttribute
        - autoscaling:CompleteLifecycleAction
      Resource: "*"
    - Effect: Allow
      Action:
        - kinesis:*
      Resource: ${self:custom.${opt:stage}.stream}

################
#### RESOURCES

resources:
  Resources:
    epxExampleVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    epxExampleSubnetA:
      DependsOn: epxExampleVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: epxExampleVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.0.0/24"
    epxExampleSubnetB:
      DependsOn: epxExampleVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: epxExampleVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: "10.0.1.0/24"
    epxExampleSubnetC:
      DependsOn: epxExampleVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: epxExampleVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: "10.0.2.0/24"
    epxExampleSecurityGroup:
      DependsOn: epxExampleVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: sg for epxExample Functions
        VpcId:
          Ref: epxExampleVPC
    epxExampleElasticacheSecurityGroup:
      DependsOn: epxExampleVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Redis elasticache cluster sg
        VpcId:
          Ref: epxExampleVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId:
            Ref: epxExampleSecurityGroup
    epxExampleElasticacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "Redis Subnet Group"
        SubnetIds:
        - Ref: epxExampleSubnetA
        - Ref: epxExampleSubnetB
        - Ref: epxExampleSubnetC
    epxExampleElasticacheCluster:
      DependsOn: epxExampleElasticacheSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        CacheNodeType: ${self:custom.${opt:stage}.cacheNodeType}
        Engine: "redis"
        NumCacheNodes: 1
        VpcSecurityGroupIds:
        - "Fn::GetAtt": epxExampleElasticacheSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: epxExampleElasticacheSubnetGroup

################
################

# items under stream must be indented four spaces
# or "EventSourceMapping" will not be created (as
# arn is a property of stream, not a peer)
functions:
  consumeKinesis:
    handler: handler.consumeKinesis
    name: ${self:service}-${self:provider.stage}
    description: ${self:service} - mock stream consumer
    memorySize: 1024
    timeout: 300
#    vpc:
#      securityGroupIds:
#        - ${self:custom.${opt:stage}.securityGroupRedis}
#      subnetIds:
#        - ${self:custom.${opt:stage}.subnet}
    events:
      - stream:
          arn: ${self:custom.${opt:stage}.stream}
          batchSize: 1
          startingPosition: TRIM_HORIZON
